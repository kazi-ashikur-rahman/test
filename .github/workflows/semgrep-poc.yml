name: Semgrep PR Scan on Changed Files

on:
  pull_request:
    branches:
      - main
      - stg
      - dev

jobs:
  semgrep:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # full history needed for git diff

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Semgrep
        run: python -m pip install --upgrade pip semgrep

      - name: Get changed files
        id: changes
        run: |
          # Get base branch from PR
          BASE_BRANCH=${{ github.event.pull_request.base.ref }}
          echo "BASE_BRANCH=$BASE_BRANCH" >> $GITHUB_ENV

          # Fetch base branch fully
          git fetch origin $BASE_BRANCH

          # Get list of changed files in the PR
          CHANGED_FILES=$(git diff --name-only origin/$BASE_BRANCH...HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Export to GitHub env for next steps
          echo "changed_files<<EOF" >> $GITHUB_ENV
          echo "$CHANGED_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Run Semgrep on changed files
        run: |
          if [ -z "$changed_files" ]; then
            echo "‚úÖ No changed files detected. Skipping Semgrep scan."
            echo '{}' > semgrep-report.json
          else
            echo "üîç Running Semgrep on changed files..."
            semgrep --config auto --json --output semgrep-report.json $changed_files

      - name: Build Markdown summary
        run: |
          python - <<'PY'
          import json

          try:
              report = json.load(open('semgrep-report.json'))
          except Exception as e:
              open('semgrep_report.md','w').write(f"‚ùó Failed to read semgrep output: {e}")
              raise

          results = report.get('results', []) or []
          if not results:
              md = "‚úÖ **Semgrep:** No issues found in changed code."
          else:
              md = f"üö® **Semgrep Scan** found **{len(results)}** issue(s)\n\n"
              counts = {}
              lines = []
              max_show = 40
              for i, r in enumerate(results):
                  if i >= max_show: break
                  rule = r.get('check_id') or r.get('rule_id') or r.get('rule') or 'unknown'
                  msg = r.get('extra', {}).get('message') or r.get('message','').strip()
                  path = r.get('path') or r.get('start', {}).get('path') or 'unknown'
                  line = r.get('start', {}).get('line') or ''
                  severity = (r.get('extra', {}).get('severity') or r.get('severity') or 'INFO').upper()
                  counts[severity] = counts.get(severity,0)+1
                  lines.append(f"- **{severity}** `{rule}` ‚Äî {msg}  \n  `{path}:{line}`")

              md += "Severity counts:\n" + "\n".join([f"- {k}: {v}" for k,v in counts.items()]) + "\n\n"
              md += "\n".join(lines)
              if len(results) > max_show:
                  md += f"\n\n_Showing first {max_show} findings._"

          open('semgrep_report.md','w').write(md)
          print(md)
          PY

      - name: Post PR comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-path: semgrep_report.md
