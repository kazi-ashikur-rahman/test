name: Semgrep PR Scan on Changed Files

on:
  pull_request:
    branches:
      - main
      - stg
      - dev

permissions:
  pull-requests: write
  contents: read

jobs:
  semgrep:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Semgrep
        run: python -m pip install --upgrade pip semgrep

      - name: Get changed lines
        id: changes
        run: |
          BASE_BRANCH=${{ github.event.pull_request.base.ref }}
          echo "Base branch: $BASE_BRANCH"

          git fetch origin $BASE_BRANCH
          
          # Save diff to file
          git diff --unified=0 --ignore-space-change origin/$BASE_BRANCH...HEAD > changed.diff
          echo "Generated diff file:"
          head -n 50 changed.diff

      - name: Run Semgrep on all changed files
        run: |
          echo "🔍 Running Semgrep..."
          semgrep --config auto --json --output semgrep-report.json

      - name: Filter results to changed lines
        run: |
          python - <<'PY'
          import json, re

          # Load Semgrep results
          report = json.load(open('semgrep-report.json'))
          results = report.get('results', [])

          # Load diff into mapping: {filename: set([lines])}
          diff_map = {}
          current_file = None
          margin = 16  # Add 16 lines above each hunk

          for line in open('changed.diff'):
              if line.startswith("+++ b/"):
                  current_file = line[6:].strip()
                  diff_map[current_file] = set()
              elif line.startswith("@@"):
                  m = re.search(r"\+(\d+)(?:,(\d+))?", line)
                  if m and current_file:
                      start = int(m.group(1))
                      count = int(m.group(2) or 1)
                      # Add 16 lines margin above the hunk
                      for l in range(max(start - margin, 1), start + count):
                          diff_map[current_file].add(l)

          # Filter results to only those in changed lines
          filtered = []
          for r in results:
              path = r.get("path")
              line = r.get("start", {}).get("line")
              if path in diff_map and line in diff_map[path]:
                  filtered.append(r)

          report['results'] = filtered
          json.dump(report, open('semgrep-report.json','w'), indent=2)
          print(f"Filtered findings: {len(filtered)} (from {len(results)})")
          PY

      - name: Build Markdown summary
        run: |
          python - <<'PY'
          import json
          try:
              report = json.load(open('semgrep-report.json'))
          except Exception as e:
              open('semgrep_report.md','w').write(f"❗ Failed to read semgrep output: {e}")
              raise

          results = report.get('results', []) or []
          if not results:
              md = "✅ **Semgrep:** No issues found in changed code."
          else:
              md = f"🚨 **Semgrep Scan** found **{len(results)}** issue(s) in changed lines\n\n"
              counts = {}
              lines = []
              for r in results:
                  rule = r.get('check_id') or r.get('rule_id') or 'unknown'
                  msg = r.get('extra', {}).get('message') or r.get('message','').strip()
                  path = r.get('path') or 'unknown'
                  line = r.get('start', {}).get('line') or ''
                  severity = (r.get('extra', {}).get('severity') or 'INFO').upper()
                  counts[severity] = counts.get(severity,0)+1
                  lines.append(f"- **{severity}** `{rule}` — {msg}  \n  `{path}:{line}`")

              md += "Severity counts:\n" + "\n".join([f"- {k}: {v}" for k,v in counts.items()]) + "\n\n"
              md += "\n".join(lines)

          open('semgrep_report.md','w').write(md)
          print(md)
          PY

      - name: Post PR comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-path: semgrep_report.md
