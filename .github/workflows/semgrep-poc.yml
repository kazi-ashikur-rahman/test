name: Semgrep PR Scan on Changed Files

on:
  pull_request:
    branches:
      - main
      - stg
      - dev

permissions:
  pull-requests: write
  contents: read

jobs:
  semgrep:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Semgrep
        run: python -m pip install --upgrade pip semgrep

      - name: Get changed lines
        id: changes
        run: |
          BASE_BRANCH=${{ github.event.pull_request.base.ref }}
          echo "Base branch: $BASE_BRANCH"

          git fetch origin $BASE_BRANCH
          
          # Save diff with exact changed lines (no context)
          git diff --unified=0 --ignore-space-change origin/$BASE_BRANCH...HEAD
          echo "Generated diff file:"
          head -n 20 changed.diff

      - name: Run Semgrep on all files
        run: |
          echo "üîç Running Semgrep..."
          semgrep --config auto --json --output semgrep-report.json

      - name: Filter results (direct vs indirect)
        run: |
          python - <<'PY'
          import json, re

          # Load Semgrep results
          report = json.load(open('semgrep-report.json'))
          results = report.get('results', [])

          # Load diff into mapping: {filename: set([lines])}
          diff_map = {}
          current_file = None
          for line in open('changed.diff'):
              if line.startswith("+++ b/"):
                  current_file = line[6:].strip()
                  diff_map[current_file] = set()
              elif line.startswith("@@"):
                  m = re.search(r"\+(\d+)(?:,(\d+))?", line)
                  if m and current_file:
                      start = int(m.group(1))
                      count = int(m.group(2) or 1)
                      for l in range(start, start+count):
                          diff_map[current_file].add(l)

          direct, indirect = [], []
          for r in results:
              path = r.get("path")
              line = r.get("start", {}).get("line")
              if not path: 
                  continue

              if path in diff_map:
                  if line in diff_map[path]:
                      r['category'] = 'direct'
                      direct.append(r)
                  else:
                      r['category'] = 'indirect'
                      indirect.append(r)

          # ‚úÖ Convert sets -> lists before dumping
          diff_map = {f: sorted(list(lines)) for f, lines in diff_map.items()}

          out = {
              "results": direct + indirect,
              "summary": {
                  "direct": len(direct),
                  "indirect": len(indirect),
                  "total": len(results)
              },
              "diff_map": diff_map
          }

          with open("semgrep-report.json", "w") as f:
              json.dump(out, f, indent=2)

          print(f"Direct findings: {len(direct)} | Indirect findings: {len(indirect)} | Total: {len(results)}")
          PY

      - name: Build Markdown summary
        run: |
          python - <<'PY'
          import json

          try:
              report = json.load(open('semgrep-report.json'))
          except Exception as e:
              open('semgrep_report.md','w').write(f"‚ùó Failed to read semgrep output: {e}")
              raise

          results = report.get('results', []) or []
          summary = report.get('summary', {})
          diff_map = report.get('diff_map', {})

          direct_count = summary.get("direct", 0)
          indirect_count = summary.get("indirect", 0)
          total = summary.get("total", len(results))

          if not results:
              md = "‚úÖ **Semgrep:** No issues found in changed code."
          else:
              md = f"üö® **Semgrep Scan** found **{total}** issue(s)\n\n"
              md += f"- üü¢ Direct (inside changed lines): {direct_count}\n"
              md += f"- üü° Indirect (same file, outside changed lines): {indirect_count}\n\n"

              if diff_map:
                  md += "### üìÇ Changed lines by file:\n"
                  for f, lines in diff_map.items():
                      md += f"- `{f}`: {lines}\n"
                  md += "\n"

              lines = []
              max_show = 50
              for i, r in enumerate(results):
                  if i >= max_show: break
                  rule = r.get('check_id') or r.get('rule_id') or 'unknown'
                  msg = r.get('extra', {}).get('message') or r.get('message','').strip()
                  path = r.get('path') or 'unknown'
                  line = r.get('start', {}).get('line') or ''
                  severity = (r.get('extra', {}).get('severity') or 'INFO').upper()
                  category = "üü¢ Direct" if r.get('category') == 'direct' else "üü° Indirect"
                  lines.append(f"- **{severity}** `{rule}` ({category}) ‚Äî {msg}  \n  `{path}:{line}`")

              md += "\n".join(lines)
              if len(results) > max_show:
                  md += f"\n\n_Showing first {max_show} findings._"

          open('semgrep_report.md','w').write(md)
          print(md)
          PY

      - name: Post PR comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-path: semgrep_report.md
